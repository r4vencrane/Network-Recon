#!/bin/bash

#Colours
greenColour="\e[0;32m\033[1m"
endColour="\033[0m\e[0m"
redColour="\e[0;31m\033[1m"
blueColour="\e[0;34m\033[1m"
yellowColour="\e[0;33m\033[1m"
purpleColour="\e[0;35m\033[1m"
turquoiseColour="\e[0;36m\033[1m"
grayColour="\e[0;37m\033[1m"

#Ctrl+C 
function ctrl_c(){
  echo -e "\n\n${redColour}[+] Leaving...${endColour}\n"
  exit 1
}

trap ctrl_c INT


banner="${greenColour}$(cat << "EOF"
 _______          __                       __     __________                            
 \      \   _____/  |___  _  _____________|  | __ \______   \ ____   ____  ____   ____  
 /   |   \_/ __ \   __\ \/ \/ /  _ \_  __ \  |/ /  |       _// __ \_/ ___\/  _ \ /    \ 
/    |    \  ___/|  |  \     (  <_> )  | \/    <   |    |   \  ___/\  \__(  <_> )   |  \
\____|__  /\___  >__|   \/\_/ \____/|__|  |__|_ \  |____|_  /\___  >\___  >____/|___|  /
        \/     \/                              \/         \/     \/     \/           \/  [v 1.0]
                             
                                     -=[ by r4venn ]=-                                        


EOF
)${endColour}"


# Función de Spinner
function spinner(){
  local SPIN=("◐" "◓" "◑" "◒")
  local i=0
  while true; do 
    echo -ne "\r[${SPIN[i]}] $1"
    ((i=(i+1)%4))
    sleep 0.1
  done
}

scan_ip(){
  ip_address="$1"
  echo -e "$banner" 
  echo 
  echo -e "\n========================================================================================="
  echo -e "                               🔍 Network Scanner 🔍"
  echo -e "=========================================================================================\n"
  echo -e "[+] Scanning IP Address 💻: $ip_address\n"

  echo -e "[*] Performing Open Port Scanning..."
  spinner "Scanning Ports..." &
  SPINNER_PID=$!

  # Escaneo rápido
  nmap -p- --open -sS --min-rate 5000 -n -Pn "$ip_address" -oG initScan &>/dev/null

  kill "$SPINNER_PID" &>/dev/null  # Detener el spinner
  echo -ne "\r[✔] Port Scan Completed.        \n"

  # Extraer puertos abiertos
  ports="$(grep -oP '\d{1,5}/open' initScan | awk -F'/' '{print $1}' | xargs | tr ' ' ',')"

  if [ -n "$ports" ]; then
    echo -e "[+] Open Ports: $ports\n"

    echo -e "[*] Obtaining detailed information on services..."
    spinner "Scanning Services..." &
    SPINNER_PID=$!

    # Escaneo detallado
    nmap -sCV -p"$ports" -n -Pn "$ip_address" -oN netScan &>/dev/null

    kill "$SPINNER_PID" &>/dev/null
    echo -ne "\r[✔] Services Scan Completed.     \n"

    echo -e "\n[*] Network Port Scan Info:"
    grep -E "^[0-9]+/tcp" netScan | while read -r line; do
      port=$(echo "$line" | awk '{print $1}' | cut -d'/' -f1)
      service=$(echo "$line" | awk '{print $3}')
      version=$(echo "$line" | cut -d' ' -f4-)
      echo -e "   ➜ Port $port: $service, $version"
    done

    # Mover esta parte fuera del while
    echo -e "\n[+]File generated after Scanning: netScan"
    echo -e "[+] You can view the Nmap original Scan for more information:"
    echo -e "   ➜ Command: cat netScan"
    rm initScan

  else
    echo -e "${redColour}[!] No open ports were found in $ip_address${endColour}"
  fi
}

# Función de ayuda
function helpPanel(){
  echo -e "$banner" 
  echo -e "\n========================================================================================="
  echo -e "                                        Help Panel"
  echo -e "========================================================================================="
  echo -e "\n${yellowColour}[+]${endColour} ${grayColour}Usage:${endColour} \n\tnetrecon [options] [arguments]"
  echo -e "\n${yellowColour}[+]${endColour} ${grayColour}Options:${endColour}"
  echo -e "  -i <IP>     ➜ Specifies the IP to scan"
  echo -e "  -h          ➜ Show Help Panel"
  echo -e "\n${yellowColour}[+]${endColour} ${grayColour}Examples:${endColour}"
  echo -e "\tnetrecon -i 10.10.10.248"
  echo -e "\t./netrecon -i 10.10.10.248"
  

}

# Indicadores
declare -i paremeter_counter=0 

while getopts "i:h" arg; do 
  case $arg in 
    i) ip_address=$OPTARG; let paremeter_counter+=1;;
    h) helpPanel; exit 0;;
    ?) helpPanel; exit 1;;
  esac
done

if [ $paremeter_counter -eq 1 ]; then
  scan_ip "$ip_address"
else
  helpPanel
fi



